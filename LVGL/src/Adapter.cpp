//==============================================================================
// LVGL::Adapter.cpp
//==============================================================================
#include "jxglib/LVGL.h"

namespace jxglib::LVGL {

//------------------------------------------------------------------------------
// LVGL::Adapter
//------------------------------------------------------------------------------
Adapter::InputDumb Adapter::inputDumb_;

const uint8_t Adapter::argbData_MouseCursor[] = {
    0xff, 0xf8, 0xf4, 0xff, 0xff, 0xfe, 0xfb, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xf8, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xec, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xf4, 0xff, 0xff, 0xff, 0xff, 0xeb, 0xff, 0xff, 0xff, 0xdd, 0xff, 0xff, 0xff, 0xf5, 0xff, 0xff, 0xfd, 0xff, 0xff,
    0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xfb, 0xfb, 0xfb, 0xff, 0xf2, 0xf7, 0xf6, 0xff, 0xf5, 0xfa, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xea, 0xf0, 0xeb, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xfd, 0xf6, 0xff, 0xff, 0xee, 0xfb, 0xfd, 0xff, 0xef, 0xf4, 0xff, 0xff, 0xea, 0xe1, 0xff, 0xff, 0xfd, 0xff, 0xfe, 0xff,
    0xff, 0xfd, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xf2, 0xee, 0xff, 0xff, 0xa4, 0xa8, 0xe9, 0xff, 0x79, 0x87, 0xd9, 0xff, 0x5b, 0x5d, 0xe1, 0xff, 0x55, 0x4e, 0xc7, 0xff, 0xaf, 0xba, 0xd6, 0xff,
    0xf4, 0xf4, 0xfa, 0xff, 0xfd, 0xfe, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xf9, 0xfe, 0xfd, 0xff, 0xf9, 0xfb, 0xfc, 0xff, 0xfc, 0xfd, 0xff, 0xff, 0xfd, 0xfd, 0xff, 0xff, 0xff, 0xf4, 0xff, 0xff, 0xe5, 0xf1, 0xcd, 0xff, 0xc4, 0xd4, 0xda, 0xff, 0x46, 0x4a, 0xc0, 0xff, 0x42, 0x4a, 0xf1, 0xff, 0x2e, 0x35, 0xe2, 0xff, 0x39, 0x3a, 0xca, 0xff, 0xa0, 0xa7, 0xf6, 0xff,
    0xfd, 0xfd, 0xff, 0xff, 0xfd, 0xfe, 0xff, 0xff, 0xfd, 0xfe, 0xfc, 0xff, 0xf9, 0xfa, 0xf6, 0xff, 0xfa, 0xfb, 0xf7, 0xff, 0xfe, 0xff, 0xfd, 0xff, 0xfb, 0xfc, 0xff, 0xff, 0xf6, 0xf6, 0xfc, 0xff, 0xd8, 0xc3, 0xe4, 0xff, 0xe2, 0xee, 0xc4, 0xff, 0xde, 0xef, 0xec, 0xff, 0x6b, 0x6f, 0xdf, 0xff, 0x36, 0x3d, 0xe8, 0xff, 0x30, 0x34, 0xea, 0xff, 0x3f, 0x41, 0xd5, 0xff, 0xb5, 0xbf, 0xff, 0xff,
    0xfd, 0xfd, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xff, 0xfe, 0xfb, 0xf6, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xf1, 0xf1, 0xf1, 0xff, 0xd6, 0xd6, 0xdc, 0xff, 0xe5, 0xdb, 0xe1, 0xff, 0xd8, 0xd8, 0xc6, 0xff, 0xdb, 0xdd, 0xe7, 0xff, 0xd4, 0xdc, 0xff, 0xff, 0x6b, 0x77, 0xd5, 0xff, 0x47, 0x43, 0xdf, 0xff, 0x4a, 0x43, 0xca, 0xff, 0xe4, 0xf5, 0xff, 0xff,
    0xff, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xf4, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xf5, 0xf0, 0xe7, 0xff, 0xda, 0xd6, 0xd5, 0xff, 0xc3, 0xc0, 0xc2, 0xff, 0xda, 0xd4, 0xd5, 0xff, 0x60, 0x5d, 0x48, 0xff, 0x57, 0x4f, 0x48, 0xff, 0xbe, 0xbb, 0xc4, 0xff, 0xb4, 0xbc, 0xd3, 0xff, 0x92, 0x8f, 0xde, 0xff, 0x97, 0x8e, 0xde, 0xff, 0xf6, 0xff, 0xf9, 0xff,
    0xfd, 0xfb, 0xfb, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xf1, 0xe7, 0xd5, 0xff, 0xd2, 0xc8, 0xb6, 0xff, 0xc3, 0xbb, 0xae, 0xff, 0xc3, 0xbf, 0xba, 0xff, 0xcb, 0xc9, 0xc9, 0xff, 0xd1, 0xc6, 0xe0, 0xff, 0x52, 0x57, 0x24, 0xff, 0x6c, 0x65, 0x3a, 0xff, 0xb2, 0x9e, 0xa3, 0xff, 0xe0, 0xdd, 0xd9, 0xff, 0xbd, 0xc3, 0xbe, 0xff, 0xea, 0xeb, 0xf5, 0xff, 0xfc, 0xfe, 0xf8, 0xff,
    0xef, 0xf3, 0xff, 0xff, 0xff, 0xf6, 0xe9, 0xff, 0xda, 0xb0, 0x57, 0xff, 0xcc, 0x8a, 0x00, 0xff, 0xc0, 0x91, 0x1e, 0xff, 0xac, 0xa4, 0x7f, 0xff, 0xc4, 0xc1, 0xca, 0xff, 0xd3, 0xbb, 0xc3, 0xff, 0xd9, 0xd1, 0xd2, 0xff, 0xbb, 0xb0, 0xa8, 0xff, 0xba, 0xad, 0x9f, 0xff, 0xd7, 0xce, 0xc4, 0xff, 0xca, 0xcc, 0xcd, 0xff, 0xc6, 0xcd, 0xd6, 0xff, 0xea, 0xf0, 0xf7, 0xff, 0xfd, 0xfe, 0xff, 0xff,
    0xf8, 0xff, 0xfb, 0xff, 0xe0, 0xde, 0xcc, 0xff, 0xce, 0xab, 0x79, 0xff, 0xca, 0x8c, 0x3e, 0xff, 0xa7, 0x7a, 0x41, 0xff, 0xc3, 0xbd, 0xb6, 0xff, 0x9c, 0xa4, 0xa4, 0xff, 0x5b, 0x50, 0x3a, 0xff, 0x97, 0x9d, 0xa8, 0xff, 0xc2, 0xc5, 0xc9, 0xff, 0xb4, 0xb4, 0xb4, 0xff, 0xb9, 0xbb, 0xbb, 0xff, 0xc5, 0xca, 0xcd, 0xff, 0xef, 0xf5, 0xfa, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xfa, 0xf7, 0xf2, 0xff,
    0xff, 0xff, 0xef, 0xff, 0xf8, 0xfa, 0xf4, 0xff, 0xff, 0xff, 0xf2, 0xff, 0xff, 0xf5, 0xd2, 0xff, 0xc4, 0xa5, 0x8e, 0xff, 0xbd, 0xbf, 0xc7, 0xff, 0x87, 0x8f, 0x96, 0xff, 0x75, 0x6f, 0x58, 0xff, 0x97, 0xa1, 0xa8, 0xff, 0xb8, 0xc2, 0xc9, 0xff, 0xaf, 0xb9, 0xc0, 0xff, 0xc7, 0xd1, 0xd8, 0xff, 0xe1, 0xea, 0xee, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xf4, 0xff,
    0xff, 0xf7, 0xfa, 0xff, 0xf8, 0xfa, 0xff, 0xff, 0xf4, 0xfd, 0xff, 0xff, 0xd8, 0xd5, 0xb6, 0xff, 0xbf, 0xb8, 0x97, 0xff, 0xc1, 0xc7, 0xc6, 0xff, 0xb0, 0xaf, 0xbf, 0xff, 0xd6, 0xc0, 0xc5, 0xff, 0xce, 0xc4, 0xa6, 0xff, 0xab, 0xa7, 0x95, 0xff, 0xd1, 0xd6, 0xd4, 0xff, 0xec, 0xf5, 0xf9, 0xff, 0xfa, 0xff, 0xff, 0xff, 0xf6, 0xf7, 0xf3, 0xff, 0xfa, 0xfb, 0xf2, 0xff, 0xff, 0xff, 0xf9, 0xff,
    0xff, 0xf7, 0xee, 0xff, 0xe6, 0xfa, 0xff, 0xff, 0xa8, 0xcb, 0xec, 0xff, 0x61, 0x73, 0x72, 0xff, 0x81, 0x82, 0x6e, 0xff, 0xa6, 0xa5, 0xa1, 0xff, 0xca, 0xc3, 0xc8, 0xff, 0xb9, 0x9e, 0x9a, 0xff, 0xd8, 0xab, 0x5a, 0xff, 0xa0, 0x81, 0x4c, 0xff, 0xff, 0xff, 0xea, 0xff, 0xf7, 0xf6, 0xf2, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xfd, 0xff, 0xfe, 0xff, 0xf2, 0xfe, 0xff, 0xff,
    0xfb, 0xff, 0xe4, 0xff, 0xac, 0xe3, 0xfe, 0xff, 0x63, 0xa4, 0xef, 0xff, 0x3d, 0x5a, 0x97, 0xff, 0x5e, 0x5b, 0x74, 0xff, 0x86, 0x7f, 0x84, 0xff, 0xe0, 0xdb, 0xcc, 0xff, 0xbb, 0xaf, 0x85, 0xff, 0xc5, 0x80, 0x11, 0xff, 0x96, 0x6b, 0x22, 0xff, 0xff, 0xff, 0xe9, 0xff, 0xf5, 0xf1, 0xf0, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xea, 0xf8, 0xff, 0xff,
    0xd6, 0xff, 0xf2, 0xff, 0x49, 0xa5, 0xd8, 0xff, 0x00, 0x61, 0xcb, 0xff, 0x1f, 0x58, 0xad, 0xff, 0x7f, 0x87, 0xac, 0xff, 0xc0, 0xbc, 0xc2, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xe4, 0xff, 0xc8, 0x87, 0x1a, 0xff, 0xc1, 0x9b, 0x5b, 0xff, 0xff, 0xf8, 0xeb, 0xff, 0xf7, 0xf8, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xf8, 0xf6, 0xff, 0xfd, 0xfb, 0xfb, 0xff, 0xf3, 0xfd, 0xff, 0xff,
    0xa1, 0xe7, 0xfe, 0xff, 0x38, 0xac, 0xff, 0xff, 0x0c, 0x91, 0xff, 0xff, 0x49, 0xa0, 0xe0, 0xff, 0xc7, 0xe6, 0xef, 0xff, 0xfa, 0xff, 0xfe, 0xff, 0xf0, 0xf2, 0xfc, 0xff, 0xfb, 0xfb, 0xff, 0xff, 0xda, 0xa4, 0x46, 0xff, 0xff, 0xf2, 0xc3, 0xff, 0xfa, 0xfe, 0xff, 0xff, 0xef, 0xf7, 0xff, 0xff, 0xfd, 0xfa, 0xff, 0xff, 0xff, 0xfd, 0xfb, 0xff, 0xff, 0xfb, 0xfb, 0xff, 0xf8, 0xfe, 0xff, 0xff,
    0x93, 0xea, 0xf4, 0xff, 0x97, 0xdf, 0xe9, 0xff, 0xad, 0xe0, 0xea, 0xff, 0xd9, 0xf3, 0xfa, 0xff, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfd, 0xfa, 0xff, 0xff, 0xfe, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xd4, 0xff, 0xff, 0xff, 0xd6, 0xf9, 0xff, 0xff, 0xe1, 0xf6, 0xfe, 0xff, 0xf6, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfe, 0xfa, 0xf9, 0xff, 0xfd, 0xfc, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfd, 0xfd, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xff, 0xf8, 0xfd, 0xfc, 0xff, 0xf6, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
};

const lv_image_dsc_t Adapter::imageDsc_MouseCursor = {
	header: {
		cf: LV_COLOR_FORMAT_ARGB8888,
		w: 16,
		h: 19,
		stride: 64,
		
	},
	data_size: sizeof(argbData_MouseCursor),
	data: argbData_MouseCursor,
};

Adapter::Adapter() : doubleBuffFlag_{false}, nPixelsBuff_{-1}, nPartialBuff_{10}, pDrawableOut_{nullptr}, disp_{nullptr},
	pInput_Pointer_{&inputDumb_}, pInput_Keypad_{&inputDumb_}, pInput_Button_{&inputDumb_}, pInput_Encoder_{&inputDumb_},
	inputTouchScreen_(*this)
{}

bool Adapter::AttachOutput(Drawable& drawable, const Rect& rect, bool requiredFlag)
{
	pDrawableOut_ = &drawable;
	rectOut_ = rect;
	Rect rectBound(0, 0, drawable.GetWidth(), drawable.GetHeight());
	if (rectOut_.IsEmpty()) { rectOut_ = rectBound; } else if (!rectOut_.Adjust(rectBound)) return false;
	disp_ = ::lv_display_create(rectOut_.width, rectOut_.height);
	::lv_display_set_color_format(disp_,
			drawable.IsFormatRGB565()? LV_COLOR_FORMAT_RGB565 :
			drawable.IsFormatRGB()? LV_COLOR_FORMAT_RGB888 :
			drawable.IsFormatBitmap()? LV_COLOR_FORMAT_I1 : LV_COLOR_FORMAT_RGB565);
	::lv_display_set_flush_cb(disp_, FlushCB);
	::lv_display_set_user_data(disp_, this);
	uint32_t bytesBuff = (nPixelsBuff_ < 0)? (rectOut_.width * rectOut_.height / nPartialBuff_) : nPixelsBuff_;
	if (drawable.GetFormat().IsBitmap()) {
		bytesBuff /= 8;
		if (bytesBuff < 1024) bytesBuff = 1024;
	} else {
		bytesBuff *= ::lv_color_format_get_size(::lv_display_get_color_format(disp_));
	}
	void* buff1 = ::lv_malloc(bytesBuff);
	if (!buff1) {
		if (requiredFlag) panic("can't allocate the first buffer (%dbytes)", bytesBuff);
		return false;
	}
	void* buff2 = nullptr;
	if (doubleBuffFlag_) {
		buff2 = ::lv_malloc(bytesBuff);
		if (!buff2) {
			if (requiredFlag) panic("can't allocate the second buffer (%dbytes)", bytesBuff);
			return false;
		}
	}
	::lv_display_set_buffers(disp_, buff1, buff2, bytesBuff, LV_DISPLAY_RENDER_MODE_PARTIAL);
	SetDefault();	// just for the convenience in the following process
	return true;
}

void Adapter::SetDefault()
{
	::lv_display_set_default(disp_);
}

void Adapter::Flush(lv_display_t* disp, const lv_area_t* area, unsigned char* buf)
{
	Image image(GetDrawableOut().GetFormat(), ::lv_area_get_width(area), ::lv_area_get_height(area), buf);
	drawImageFastHandler_.disp = disp;	
	GetDrawableOut().DrawImageFast(rectOut_.x + area->x1, rectOut_.y + area->y1, image, !doubleBuffFlag_, &drawImageFastHandler_);
}

lv_indev_t* Adapter::SetInput_Pointer(Input& input)
{
	pInput_Pointer_ = &input;
	return RegisterInput(LV_INDEV_TYPE_POINTER, IndevReadPointerCB);
}

lv_indev_t* Adapter::SetInput_Keypad(Input& input)
{
	pInput_Keypad_ = &input;
	return RegisterInput(LV_INDEV_TYPE_KEYPAD, IndevReadKeypadCB);
}

lv_indev_t* Adapter::SetInput_Button(Input& input)
{
	pInput_Button_ = &input;
	return RegisterInput(LV_INDEV_TYPE_BUTTON, IndevReadButtonCB);
}

lv_indev_t* Adapter::SetInput_Encoder(Input& input)
{
	pInput_Encoder_ = &input;
	return RegisterInput(LV_INDEV_TYPE_ENCODER, IndevReadEncoderCB);
}

lv_indev_t* Adapter::AttachInput(TouchScreen& touchScreen)
{
	inputTouchScreen_.SetTouchScreen(touchScreen);
	return SetInput_Pointer(inputTouchScreen_);
}

lv_indev_t* Adapter::AttachInput(Mouse& mouse)
{
	inputMouse_.SetMouse(mouse);
	lv_indev_t* indev = SetInput_Pointer(inputMouse_);
	// https://docs.lvgl.io/master/details/main-modules/indev.html
	//LV_IMAGE_DECLARE(mouse_cursor_icon);							// Declare the image source.
	lv_obj_t* objCursor = lv_image_create(::lv_screen_active());	// Create image Widget for cursor.
	::lv_image_set_src(objCursor, &imageDsc_MouseCursor);			// Set image source.
	::lv_indev_set_cursor(indev, objCursor);						// Connect image to Input Device.
	Mouse::Status status = mouse.CaptureStatus();
	//::lv_image_set_pivot(objCursor, 10, 0);
	::lv_obj_set_pos(objCursor, status.GetPoint().x, status.GetPoint().y);
	return indev;
}

lv_indev_t* Adapter::AttachInput(Keyboard& keyboard, bool setGroupFlag)
{
	inputKeyboard_.SetKeyboard(keyboard);
	lv_indev_t* indev = SetInput_Keypad(inputKeyboard_);
	if (setGroupFlag) {
		lv_group_t* group = ::lv_group_create();
		::lv_group_set_default(group);
		::lv_indev_set_group(indev, group);
	}
	return indev;
}

lv_indev_t* Adapter::RegisterInput(lv_indev_type_t indev_type, lv_indev_read_cb_t cb)
{
	lv_indev_t* indev = ::lv_indev_create();
	::lv_indev_set_type(indev, indev_type);
	::lv_indev_set_read_cb(indev, cb);
	::lv_indev_set_user_data(indev, this);
	::lv_indev_set_display(indev, disp_);
	SetDefault();	// just for the convenience in the following process
	return indev;
}

void Adapter::FlushCB(lv_display_t* disp, const lv_area_t* area, unsigned char* buf)
{
	//::printf("FlushCB(x1:%d, y1:%d, x2:%d, y2:%d)\n", area->x1, area->y1, area->x2, area->y2);
	Adapter* pSelf = reinterpret_cast<Adapter*>(::lv_display_get_user_data(disp));
	pSelf->Flush(disp, area, buf);
}

void Adapter::IndevReadPointerCB(lv_indev_t* indev, lv_indev_data_t* data)
{
	Adapter* pSelf = reinterpret_cast<Adapter*>(::lv_indev_get_user_data(indev));
	pSelf->pInput_Pointer_->Handle(indev, data);
}

void Adapter::IndevReadKeypadCB(lv_indev_t* indev, lv_indev_data_t* data)
{
	Adapter* pSelf = reinterpret_cast<Adapter*>(::lv_indev_get_user_data(indev));
	pSelf->pInput_Keypad_->Handle(indev, data);
}

void Adapter::IndevReadButtonCB(lv_indev_t* indev, lv_indev_data_t* data)
{
	Adapter* pSelf = reinterpret_cast<Adapter*>(::lv_indev_get_user_data(indev));
	pSelf->pInput_Button_->Handle(indev, data);
}

void Adapter::IndevReadEncoderCB(lv_indev_t* indev, lv_indev_data_t* data)
{
	Adapter* pSelf = reinterpret_cast<Adapter*>(::lv_indev_get_user_data(indev));
	pSelf->pInput_Encoder_->Handle(indev, data);
}

//------------------------------------------------------------------------------
// Adapter::InputTouchScreen
//------------------------------------------------------------------------------
void Adapter::InputTouchScreen::Handle(lv_indev_t* indev_drv, lv_indev_data_t* data)
{
	Point pt;
	const Rect& rectOut = adapter_.GetRectOut();
	bool touchFlag = pTouchScreen_->ReadPoint(&pt);
	data->state = touchFlag? LV_INDEV_STATE_PRESSED : LV_INDEV_STATE_RELEASED;
	data->point.x = pt.x - rectOut.x;
	data->point.y = pt.y - rectOut.y;
}

//------------------------------------------------------------------------------
// Adapter::InputMouse
//------------------------------------------------------------------------------
void Adapter::InputMouse::Handle(lv_indev_t* indev_drv, lv_indev_data_t* data)
{
	Mouse::Status status = pMouse_->CaptureStatus();
	data->state = status.GetButtonLeft()? LV_INDEV_STATE_PRESSED : LV_INDEV_STATE_RELEASED;
	data->point.x = status.GetPoint().x;
	data->point.y = status.GetPoint().y;
}

//------------------------------------------------------------------------------
// Adapter::InputKeyboard
//------------------------------------------------------------------------------
void Adapter::InputKeyboard::Handle(lv_indev_t* indev_drv, lv_indev_data_t* data)
{
	KeyData keyData;
	if (pKeyboard_->GetKeyData(keyData)) {
		if (keyData.IsKeyCode()) {
			uint8_t keyCode = keyData.GetKeyCode();
			data->key =
				(keyCode == VK_TAB)?	LV_KEY_NEXT :
				(keyCode == VK_PRIOR)?	LV_KEY_PREV :
				(keyCode == VK_NEXT)?	LV_KEY_NEXT :
				(keyCode == VK_RETURN)?	LV_KEY_ENTER :
				(keyCode == VK_UP)?		LV_KEY_UP :
				(keyCode == VK_DOWN)?	LV_KEY_DOWN :
				(keyCode == VK_LEFT)?	LV_KEY_LEFT :
				(keyCode == VK_RIGHT)?	LV_KEY_RIGHT :
				(keyCode == VK_ESCAPE)?	LV_KEY_ESC :
				(keyCode == VK_DELETE)?	LV_KEY_DEL :
				(keyCode == VK_BACK)?	LV_KEY_BACKSPACE :
				(keyCode == VK_HOME)?	LV_KEY_HOME :
				(keyCode == VK_END)?	LV_KEY_END : 0;
		} else {
			data->key = keyData.GetCharCode();
		}
		data->state = LV_INDEV_STATE_PRESSED;
	} else {
		data->state = LV_INDEV_STATE_RELEASED;
	}
}

}
